{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Akismet for JS Stop spam Used by millions of websites, Akismet filters out hundreds of millions of spam comments from the Web every day. Add Akismet to your Node.js applications so you don't have to worry about spam again. Quick start Get a developer key You first need to sign up for a developer key . This will give you access to the API and will allow Akismet to monitor its results to make sure things are running as smoothly as possible. Warning All Akismet endpoints require an API key. If you are not already registered, join the developer program . Get the library Install the latest version of Akismet for JS with npm : npm install @cedx/akismet For detailed instructions, see the installation guide .","title":"Overview"},{"location":"#akismet-for-js","text":"","title":"Akismet for JS"},{"location":"#stop-spam","text":"Used by millions of websites, Akismet filters out hundreds of millions of spam comments from the Web every day. Add Akismet to your Node.js applications so you don't have to worry about spam again.","title":"Stop spam"},{"location":"#quick-start","text":"","title":"Quick start"},{"location":"#get-a-developer-key","text":"You first need to sign up for a developer key . This will give you access to the API and will allow Akismet to monitor its results to make sure things are running as smoothly as possible. Warning All Akismet endpoints require an API key. If you are not already registered, join the developer program .","title":"Get a developer key"},{"location":"#get-the-library","text":"Install the latest version of Akismet for JS with npm : npm install @cedx/akismet For detailed instructions, see the installation guide .","title":"Get the library"},{"location":"installation/","text":"Installation Requirements Before installing Akismet for JS , you need to make sure you have Node.js and npm , the Node.js package manager, up and running. Warning Akismet for JS requires Node.js = 10.15.0 . You can verify if you're already good to go with the following commands: node --version # v11.8.0 npm --version # 6.5.0 Info If you plan to play with the package sources, you will also need Gulp and Material for MkDocs . Installing with npm package manager 1. Install it From a command prompt, run: npm install @cedx/akismet 2. Import it Now in your JavaScript or TypeScript code, you can use: import * as akismet from @cedx/akismet ; Info This library is packaged as CommonJS modules ( .js files) and ECMAScript modules ( .mjs files). To consume it in a browser, you must use a dedicated tool chain, like a build system coupled with a bundler. 3. Use it See the usage information . Installing from a content delivery network This library is also available as a ready-made bundle. To install it, add this code snippet to the head of your HTML document: !-- jsDelivr -- script src = https://cdn.jsdelivr.net/npm/@cedx/akismet/build/akismet.min.js / script !-- UNPKG -- script src = https://unpkg.com/@cedx/akismet/build/akismet.min.js / script The classes of this library are exposed as akismet property on the window global object: script const { Client , Comment , Author , ...} = window . akismet ; / script","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"Before installing Akismet for JS , you need to make sure you have Node.js and npm , the Node.js package manager, up and running. Warning Akismet for JS requires Node.js = 10.15.0 . You can verify if you're already good to go with the following commands: node --version # v11.8.0 npm --version # 6.5.0 Info If you plan to play with the package sources, you will also need Gulp and Material for MkDocs .","title":"Requirements"},{"location":"installation/#installing-with-npm-package-manager","text":"","title":"Installing with npm package manager"},{"location":"installation/#1-install-it","text":"From a command prompt, run: npm install @cedx/akismet","title":"1. Install it"},{"location":"installation/#2-import-it","text":"Now in your JavaScript or TypeScript code, you can use: import * as akismet from @cedx/akismet ; Info This library is packaged as CommonJS modules ( .js files) and ECMAScript modules ( .mjs files). To consume it in a browser, you must use a dedicated tool chain, like a build system coupled with a bundler.","title":"2. Import it"},{"location":"installation/#3-use-it","text":"See the usage information .","title":"3. Use it"},{"location":"installation/#installing-from-a-content-delivery-network","text":"This library is also available as a ready-made bundle. To install it, add this code snippet to the head of your HTML document: !-- jsDelivr -- script src = https://cdn.jsdelivr.net/npm/@cedx/akismet/build/akismet.min.js / script !-- UNPKG -- script src = https://unpkg.com/@cedx/akismet/build/akismet.min.js / script The classes of this library are exposed as akismet property on the window global object: script const { Client , Comment , Author , ...} = window . akismet ; / script","title":"Installing from a content delivery network"},{"location":"about/changelog/","text":"Changelog Version 14.0.0 Breaking change: ported the source code to TypeScript . Breaking change: changed the signature of the constructors. Breaking change: changed the signature of the fromJson() methods. Breaking change: raised the required Node.js version. Breaking change: removed the defaultEndPoint and debugHeader static properties from the Client class. Added the eventRequest and eventResponse static properties to the Client class. Added an example code. Ported the unit tests to classes with experimental decorators. Replaced ESDoc documentation generator by TypeDoc . Replaced ESLint static analyzer by TSLint . Updated the package dependencies. Using the global URL and URLSearchParams classes. Version 13.1.0 Added a user guide based on MkDocs . Added the ClientError class. Updated the build system to Gulp version 4. Updated the package dependencies. Version 13.0.1 Breaking change: changed the signature of the Client events. Updated the package dependencies. Version 12.0.0 Breaking change: changed the signature of most class constructors. Breaking change: raised the required Node.js version. Breaking change: removed the toJSON() and toString() methods from the Client class. Breaking change: using camel case instead of studly caps for static properties. Added new values to the CommentType enumeration. Updated the package dependencies. Version 11.0.0 Breaking change: converted the Observable -based API to an async/await -based one. Breaking change: converted the Subject event API to the EventEmitter one. Added the #[Symbol.toStringTag] property to all classes. Changed licensing for the MIT License . Version 10.1.0 Replaced the SuperAgent HTTP client by node-fetch . Updated the package dependencies. Version 10.0.0 Breaking change: renamed the fromJSON() static methods to fromJson . Changed the naming convention: acronyms and abbreviations are capitalized like regular words, except for two-letter acronyms. Updated the package dependencies. Version 9.1.0 Removed the dependency on Babel compiler. Updated the package dependencies. Version 9.0.0 Breaking change: reverted the API of the Client class to an Observable -based one. Added new unit tests. Updated the package dependencies. Version 8.0.1 Fixed a code generation bug. Updated the package dependencies. Version 8.0.0 Breaking change: properties representing URLs as strings now use instances of the URL class. Breaking change: raised the required Node.js version. Updated the package dependencies. Version 7.1.0 Added support for the Node Security Platform reports. Updated the package dependencies. Version 7.0.0 Breaking change: dropped the dependency on Observables . Breaking change: the Client class is now an EventEmitter . Version 6.2.0 Updated the package dependencies. Version 6.1.0 Removed the dependency on the @cedx/enum module. Removed the dependency on the gulp-load-plugins module. Version 6.0.0 Breaking change: raised the required Node.js version. Breaking change: using ES2017 features, like async/await functions. Improved the build system. Ported the unit test assertions from TDD to BDD . Updated the package dependencies. Version 5.0.0 Breaking change: changed the signature of all constructors. Breaking change: changed the return type of several Client methods. Breaking change: renamed the Client.SERVICE_URL constant to defaultEndPoint . Added the Client.endPoint property. Updated the package dependencies. Version 4.0.0 Breaking change: changed the Blog.language string property for the languages array property. Breaking change: reverted the Client.test property to isTest . Removed the v prefix from the Node.js version number in the Client.userAgent property. Removed the dist build task. Updated the package dependencies. Version 3.4.0 Replaced the Codacy code coverage service by the Coveralls one. Updated the package dependencies. Version 3.3.0 Added the onRequest and onResponse event streams to the Client class. Version 3.2.0 Updated the SuperAgent dependency. Version 3.1.0 Allowing to set dates as timestamps or strings in the Comment constructor. Version 3.0.0 Breaking change: modified the signature of the constructor of the Client class. Breaking change: renamed the Client.isTest property to test . Added the Client.debugHeader property. Added the Client.toJSON() method. Version 2.0.1 Added a dedicated enumeration API to the CommentType type. Version 2.0.0 Breaking change: removed the Client.serviceURL property. Breaking change: removed the EndPoints enumeration. Breaking change: renamed the Client.DEFAULT_SERVICE property to SERVICE_URL . Updated the package dependencies. Updated the project URL. Version 1.0.1 Fixed issue #5 . Version 1.0.0 Breaking change: changed the signature of the fromJSON methods. Breaking change: dropped the embedded server and the command line interface. Breaking change: ported the CommonJS modules to ES2015 format. Breaking change: ported the Promise -based APIs to Observables . Breaking change: raised the required Node.js version. Breaking change: removed the url parameter from the Blog constructor. Breaking change: removed the HTTPHeaders enumeration. Added a build task for fixing the coding standards issues. Replaced JSDoc documentation generator by ESDoc . Replaced JSHint linter by ESLint . Replaced the test classes by plain tests. Updated the package dependencies. Version 0.9.0 Breaking change: renamed the Server.DEFAULT_HOST property to DEFAULT_ADDRESS . Breaking change: renamed the Server.host property to address . Breaking change: renamed the -H, --host command line option to -a, --address . Upgraded the package dependencies. Version 0.8.0 Breaking change: using more ES2015 features, like default parameters and destructuring assignment. Breaking change: raised the required Node.js version. Breaking change: fixed the signature and behavior of the toJSON() methods. Breaking change: changed the case of the Client.serviceUrl and Server.redirectUrl properties. Turned the package into a scoped one . Added the DEFAULT_HOST and DEFAULT_PORT constants to the Server class. Added more unit tests. Replaced SonarQube code analyzer by Codacy service. Improved the code coverage. Version 0.7.1 Added a command line option to set the user to drop privileges to once server socket is bound. Fixed issue #4 : properly handle the host and port command line arguments. Upgraded the package dependencies. Version 0.7.0 Breaking change: using ES2015 features, like arrow functions, block-scoped binding constructs, classes and template strings. Breaking change: raised the required Node.js version. Breaking change: the Server class is not exposed anymore by the default exports. Breaking change: Application._log method renamed to log . The port parameter of Server.listen() method is now optional. Improved browser integration. Added support for code coverage. Added support for SonarQube code analyzer. Added support for Travis CI continuous integration. Changed the documentation system for JSDoc . Changed licensing for the Apache License Version 2.0 . Version 0.6.2 Fixed a bug in Comment.toJSON method. Version 0.6.1 Fixed the usage of Author.role property. Fixed the usage of Client.isTest property. Fixed a unit test. Version 0.6.0 Added role property to Author class. Added isTest property to Client class. Added date and postModified properties to Comment class. Version 0.5.2 Upgraded the package dependencies. Version 0.5.1 Upgraded the package dependencies. Version 0.5.0 Raised the required Node.js version. Removed the dependency on promise module. Upgraded the package dependencies. Fixed issue #3 : returning a Promise in Server.checkComment method. Version 0.4.1 Fixed issue #2 : using a Unix system for publishing the package on npm . Version 0.4.0 Breaking change: ported the callback-based API to Promises . Version 0.3.5 Using Gulp as build system. Version 0.3.4 CORS headers handling delegated to cors module. Version 0.3.3 Upgraded the package dependencies. Version 0.3.2 Lowered the required Node.js version. Version 0.3.1 Fixed bugs in server implementation: bad error handling. Version 0.3.0 Added Blog class to support the latest Akismet APIs. Version 0.2.1 Fixed bugs in server implementation: bad parsing of client requests. Version 0.2.0 Added client implementation based on XMLHttpRequest . Added server implementation used to proxy requests from HTML clients to Akismet service. Version 0.1.0 Initial release: client implementation based on http.request .","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#version-1400","text":"Breaking change: ported the source code to TypeScript . Breaking change: changed the signature of the constructors. Breaking change: changed the signature of the fromJson() methods. Breaking change: raised the required Node.js version. Breaking change: removed the defaultEndPoint and debugHeader static properties from the Client class. Added the eventRequest and eventResponse static properties to the Client class. Added an example code. Ported the unit tests to classes with experimental decorators. Replaced ESDoc documentation generator by TypeDoc . Replaced ESLint static analyzer by TSLint . Updated the package dependencies. Using the global URL and URLSearchParams classes.","title":"Version 14.0.0"},{"location":"about/changelog/#version-1310","text":"Added a user guide based on MkDocs . Added the ClientError class. Updated the build system to Gulp version 4. Updated the package dependencies.","title":"Version 13.1.0"},{"location":"about/changelog/#version-1301","text":"Breaking change: changed the signature of the Client events. Updated the package dependencies.","title":"Version 13.0.1"},{"location":"about/changelog/#version-1200","text":"Breaking change: changed the signature of most class constructors. Breaking change: raised the required Node.js version. Breaking change: removed the toJSON() and toString() methods from the Client class. Breaking change: using camel case instead of studly caps for static properties. Added new values to the CommentType enumeration. Updated the package dependencies.","title":"Version 12.0.0"},{"location":"about/changelog/#version-1100","text":"Breaking change: converted the Observable -based API to an async/await -based one. Breaking change: converted the Subject event API to the EventEmitter one. Added the #[Symbol.toStringTag] property to all classes. Changed licensing for the MIT License .","title":"Version 11.0.0"},{"location":"about/changelog/#version-1010","text":"Replaced the SuperAgent HTTP client by node-fetch . Updated the package dependencies.","title":"Version 10.1.0"},{"location":"about/changelog/#version-1000","text":"Breaking change: renamed the fromJSON() static methods to fromJson . Changed the naming convention: acronyms and abbreviations are capitalized like regular words, except for two-letter acronyms. Updated the package dependencies.","title":"Version 10.0.0"},{"location":"about/changelog/#version-910","text":"Removed the dependency on Babel compiler. Updated the package dependencies.","title":"Version 9.1.0"},{"location":"about/changelog/#version-900","text":"Breaking change: reverted the API of the Client class to an Observable -based one. Added new unit tests. Updated the package dependencies.","title":"Version 9.0.0"},{"location":"about/changelog/#version-801","text":"Fixed a code generation bug. Updated the package dependencies.","title":"Version 8.0.1"},{"location":"about/changelog/#version-800","text":"Breaking change: properties representing URLs as strings now use instances of the URL class. Breaking change: raised the required Node.js version. Updated the package dependencies.","title":"Version 8.0.0"},{"location":"about/changelog/#version-710","text":"Added support for the Node Security Platform reports. Updated the package dependencies.","title":"Version 7.1.0"},{"location":"about/changelog/#version-700","text":"Breaking change: dropped the dependency on Observables . Breaking change: the Client class is now an EventEmitter .","title":"Version 7.0.0"},{"location":"about/changelog/#version-620","text":"Updated the package dependencies.","title":"Version 6.2.0"},{"location":"about/changelog/#version-610","text":"Removed the dependency on the @cedx/enum module. Removed the dependency on the gulp-load-plugins module.","title":"Version 6.1.0"},{"location":"about/changelog/#version-600","text":"Breaking change: raised the required Node.js version. Breaking change: using ES2017 features, like async/await functions. Improved the build system. Ported the unit test assertions from TDD to BDD . Updated the package dependencies.","title":"Version 6.0.0"},{"location":"about/changelog/#version-500","text":"Breaking change: changed the signature of all constructors. Breaking change: changed the return type of several Client methods. Breaking change: renamed the Client.SERVICE_URL constant to defaultEndPoint . Added the Client.endPoint property. Updated the package dependencies.","title":"Version 5.0.0"},{"location":"about/changelog/#version-400","text":"Breaking change: changed the Blog.language string property for the languages array property. Breaking change: reverted the Client.test property to isTest . Removed the v prefix from the Node.js version number in the Client.userAgent property. Removed the dist build task. Updated the package dependencies.","title":"Version 4.0.0"},{"location":"about/changelog/#version-340","text":"Replaced the Codacy code coverage service by the Coveralls one. Updated the package dependencies.","title":"Version 3.4.0"},{"location":"about/changelog/#version-330","text":"Added the onRequest and onResponse event streams to the Client class.","title":"Version 3.3.0"},{"location":"about/changelog/#version-320","text":"Updated the SuperAgent dependency.","title":"Version 3.2.0"},{"location":"about/changelog/#version-310","text":"Allowing to set dates as timestamps or strings in the Comment constructor.","title":"Version 3.1.0"},{"location":"about/changelog/#version-300","text":"Breaking change: modified the signature of the constructor of the Client class. Breaking change: renamed the Client.isTest property to test . Added the Client.debugHeader property. Added the Client.toJSON() method.","title":"Version 3.0.0"},{"location":"about/changelog/#version-201","text":"Added a dedicated enumeration API to the CommentType type.","title":"Version 2.0.1"},{"location":"about/changelog/#version-200","text":"Breaking change: removed the Client.serviceURL property. Breaking change: removed the EndPoints enumeration. Breaking change: renamed the Client.DEFAULT_SERVICE property to SERVICE_URL . Updated the package dependencies. Updated the project URL.","title":"Version 2.0.0"},{"location":"about/changelog/#version-101","text":"Fixed issue #5 .","title":"Version 1.0.1"},{"location":"about/changelog/#version-100","text":"Breaking change: changed the signature of the fromJSON methods. Breaking change: dropped the embedded server and the command line interface. Breaking change: ported the CommonJS modules to ES2015 format. Breaking change: ported the Promise -based APIs to Observables . Breaking change: raised the required Node.js version. Breaking change: removed the url parameter from the Blog constructor. Breaking change: removed the HTTPHeaders enumeration. Added a build task for fixing the coding standards issues. Replaced JSDoc documentation generator by ESDoc . Replaced JSHint linter by ESLint . Replaced the test classes by plain tests. Updated the package dependencies.","title":"Version 1.0.0"},{"location":"about/changelog/#version-090","text":"Breaking change: renamed the Server.DEFAULT_HOST property to DEFAULT_ADDRESS . Breaking change: renamed the Server.host property to address . Breaking change: renamed the -H, --host command line option to -a, --address . Upgraded the package dependencies.","title":"Version 0.9.0"},{"location":"about/changelog/#version-080","text":"Breaking change: using more ES2015 features, like default parameters and destructuring assignment. Breaking change: raised the required Node.js version. Breaking change: fixed the signature and behavior of the toJSON() methods. Breaking change: changed the case of the Client.serviceUrl and Server.redirectUrl properties. Turned the package into a scoped one . Added the DEFAULT_HOST and DEFAULT_PORT constants to the Server class. Added more unit tests. Replaced SonarQube code analyzer by Codacy service. Improved the code coverage.","title":"Version 0.8.0"},{"location":"about/changelog/#version-071","text":"Added a command line option to set the user to drop privileges to once server socket is bound. Fixed issue #4 : properly handle the host and port command line arguments. Upgraded the package dependencies.","title":"Version 0.7.1"},{"location":"about/changelog/#version-070","text":"Breaking change: using ES2015 features, like arrow functions, block-scoped binding constructs, classes and template strings. Breaking change: raised the required Node.js version. Breaking change: the Server class is not exposed anymore by the default exports. Breaking change: Application._log method renamed to log . The port parameter of Server.listen() method is now optional. Improved browser integration. Added support for code coverage. Added support for SonarQube code analyzer. Added support for Travis CI continuous integration. Changed the documentation system for JSDoc . Changed licensing for the Apache License Version 2.0 .","title":"Version 0.7.0"},{"location":"about/changelog/#version-062","text":"Fixed a bug in Comment.toJSON method.","title":"Version 0.6.2"},{"location":"about/changelog/#version-061","text":"Fixed the usage of Author.role property. Fixed the usage of Client.isTest property. Fixed a unit test.","title":"Version 0.6.1"},{"location":"about/changelog/#version-060","text":"Added role property to Author class. Added isTest property to Client class. Added date and postModified properties to Comment class.","title":"Version 0.6.0"},{"location":"about/changelog/#version-052","text":"Upgraded the package dependencies.","title":"Version 0.5.2"},{"location":"about/changelog/#version-051","text":"Upgraded the package dependencies.","title":"Version 0.5.1"},{"location":"about/changelog/#version-050","text":"Raised the required Node.js version. Removed the dependency on promise module. Upgraded the package dependencies. Fixed issue #3 : returning a Promise in Server.checkComment method.","title":"Version 0.5.0"},{"location":"about/changelog/#version-041","text":"Fixed issue #2 : using a Unix system for publishing the package on npm .","title":"Version 0.4.1"},{"location":"about/changelog/#version-040","text":"Breaking change: ported the callback-based API to Promises .","title":"Version 0.4.0"},{"location":"about/changelog/#version-035","text":"Using Gulp as build system.","title":"Version 0.3.5"},{"location":"about/changelog/#version-034","text":"CORS headers handling delegated to cors module.","title":"Version 0.3.4"},{"location":"about/changelog/#version-033","text":"Upgraded the package dependencies.","title":"Version 0.3.3"},{"location":"about/changelog/#version-032","text":"Lowered the required Node.js version.","title":"Version 0.3.2"},{"location":"about/changelog/#version-031","text":"Fixed bugs in server implementation: bad error handling.","title":"Version 0.3.1"},{"location":"about/changelog/#version-030","text":"Added Blog class to support the latest Akismet APIs.","title":"Version 0.3.0"},{"location":"about/changelog/#version-021","text":"Fixed bugs in server implementation: bad parsing of client requests.","title":"Version 0.2.1"},{"location":"about/changelog/#version-020","text":"Added client implementation based on XMLHttpRequest . Added server implementation used to proxy requests from HTML clients to Akismet service.","title":"Version 0.2.0"},{"location":"about/changelog/#version-010","text":"Initial release: client implementation based on http.request .","title":"Version 0.1.0"},{"location":"about/license/","text":"MIT License Copyright 2014 - 2019 C\u00e9dric Belin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#mit-license","text":"Copyright 2014 - 2019 C\u00e9dric Belin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"about/see_also/","text":"See also Development Akismet for developers API reference npm package Submit an issue Testing Continuous integration Code coverage Other implementations Dart: Akismet for Dart PHP: Akismet for PHP Yii Framework: Akismet for Yii","title":"See also"},{"location":"about/see_also/#see-also","text":"","title":"See also"},{"location":"about/see_also/#development","text":"Akismet for developers API reference npm package Submit an issue","title":"Development"},{"location":"about/see_also/#testing","text":"Continuous integration Code coverage","title":"Testing"},{"location":"about/see_also/#other-implementations","text":"Dart: Akismet for Dart PHP: Akismet for PHP Yii Framework: Akismet for Yii","title":"Other implementations"},{"location":"features/comment_check/","text":"Comment check This is the call you will make the most. It takes a number of arguments and characteristics about the submitted content and then returns a thumbs up or thumbs down. Performance can drop dramatically if you choose to exclude data points. The more data you send Akismet about each comment, the greater the accuracy. We recommend erring on the side of including too much data. Client#checkComment(comment: Comment): Promise boolean Testing your data It is important to test Akismet with a significant amount of real, live data in order to draw any conclusions on accuracy. Akismet works by comparing content to genuine spam activity happening right now (and this is based on more than just the content itself), so artificially generating spam comments is not a viable approach. Parameters comment : Comment The Comment providing the user message to be checked. Return value A Promise that resolves with a boolean value indicating whether the given Comment is spam. The promise rejects with a ClientError exception when an error occurs. The exception message usually includes some debug information, provided by the X-akismet-debug-help HTTP header, about what exactly was invalid about the call. Example import { Author , Blog , Client , Comment } from @cedx/akismet ; async function main () : Promise void { try { const comment = new Comment ( new Author ( 127.0.0.1 , Mozilla/5.0 ), { content : A user comment , date : new Date } ); const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com ))); const isSpam = await client . checkComment ( comment ); console . log ( isSpam ? The comment is spam : The comment is ham ); } catch ( err ) { console . log ( `An error occurred: ${ err . message } ` ); } }","title":"Comment check"},{"location":"features/comment_check/#comment-check","text":"This is the call you will make the most. It takes a number of arguments and characteristics about the submitted content and then returns a thumbs up or thumbs down. Performance can drop dramatically if you choose to exclude data points. The more data you send Akismet about each comment, the greater the accuracy. We recommend erring on the side of including too much data. Client#checkComment(comment: Comment): Promise boolean Testing your data It is important to test Akismet with a significant amount of real, live data in order to draw any conclusions on accuracy. Akismet works by comparing content to genuine spam activity happening right now (and this is based on more than just the content itself), so artificially generating spam comments is not a viable approach.","title":"Comment check"},{"location":"features/comment_check/#parameters","text":"","title":"Parameters"},{"location":"features/comment_check/#comment-comment","text":"The Comment providing the user message to be checked.","title":"comment: Comment"},{"location":"features/comment_check/#return-value","text":"A Promise that resolves with a boolean value indicating whether the given Comment is spam. The promise rejects with a ClientError exception when an error occurs. The exception message usually includes some debug information, provided by the X-akismet-debug-help HTTP header, about what exactly was invalid about the call.","title":"Return value"},{"location":"features/comment_check/#example","text":"import { Author , Blog , Client , Comment } from @cedx/akismet ; async function main () : Promise void { try { const comment = new Comment ( new Author ( 127.0.0.1 , Mozilla/5.0 ), { content : A user comment , date : new Date } ); const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com ))); const isSpam = await client . checkComment ( comment ); console . log ( isSpam ? The comment is spam : The comment is ham ); } catch ( err ) { console . log ( `An error occurred: ${ err . message } ` ); } }","title":"Example"},{"location":"features/key_verification/","text":"Key verification Key verification authenticates your key before calling the comment check , submit spam , or submit ham methods. This is the first call that you should make to Akismet and is especially useful if you will have multiple users with their own Akismet subscriptions using your application. Client#verifyKey(): Promise boolean Parameters None. Return value A Promise that resolves with a boolean value indicating whether the client's API key is valid. The promise rejects with a ClientError exception when an error occurs. The exception message usually includes some debug information, provided by the X-akismet-debug-help HTTP header, about what exactly was invalid about the call. Example import { Blog , Client } from @cedx/akismet ; async function main () : Promise void { try { const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com ))); const isValid = await client . verifyKey (); console . log ( isValid ? The API key is valid : The API key is invalid ); } catch ( err ) { console . log ( `An error occurred: ${ err . message } ` ); } }","title":"Key verification"},{"location":"features/key_verification/#key-verification","text":"Key verification authenticates your key before calling the comment check , submit spam , or submit ham methods. This is the first call that you should make to Akismet and is especially useful if you will have multiple users with their own Akismet subscriptions using your application. Client#verifyKey(): Promise boolean","title":"Key verification"},{"location":"features/key_verification/#parameters","text":"None.","title":"Parameters"},{"location":"features/key_verification/#return-value","text":"A Promise that resolves with a boolean value indicating whether the client's API key is valid. The promise rejects with a ClientError exception when an error occurs. The exception message usually includes some debug information, provided by the X-akismet-debug-help HTTP header, about what exactly was invalid about the call.","title":"Return value"},{"location":"features/key_verification/#example","text":"import { Blog , Client } from @cedx/akismet ; async function main () : Promise void { try { const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com ))); const isValid = await client . verifyKey (); console . log ( isValid ? The API key is valid : The API key is invalid ); } catch ( err ) { console . log ( `An error occurred: ${ err . message } ` ); } }","title":"Example"},{"location":"features/submit_ham/","text":"Submit ham This call is intended for the submission of false positives - items that were incorrectly classified as spam by Akismet. It takes identical arguments as comment check and submit spam . Remember that, as explained in the submit spam documentation, you should ensure that any values you're passing here match up with the original and corresponding comment check call. Client#submitHam(comment: Comment): Promise void Parameters comment : Comment The user Comment to be submitted, incorrectly classified as spam. Tip Ideally, it should be the same object as the one passed to the original comment check API call. Return value A Promise that resolves when the given Comment has been submitted. The promise rejects with a ClientError exception when an error occurs. The exception message usually includes some debug information, provided by the X-akismet-debug-help HTTP header, about what exactly was invalid about the call. Example import { Author , Blog , Client , Comment } from @cedx/akismet ; async function main () : Promise void { try { const comment = new Comment ( new Author ( 127.0.0.1 , Mozilla/5.0 ), { content : A valid user comment (ham) } ); const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com ))); const isSpam = await client . checkComment ( comment ); // `true`, but `false` expected. console . log ( The comment was incorrectly classified as spam ); await client . submitHam ( comment ); } catch ( err ) { console . log ( `An error occurred: ${ err . message } ` ); } }","title":"Submit ham"},{"location":"features/submit_ham/#submit-ham","text":"This call is intended for the submission of false positives - items that were incorrectly classified as spam by Akismet. It takes identical arguments as comment check and submit spam . Remember that, as explained in the submit spam documentation, you should ensure that any values you're passing here match up with the original and corresponding comment check call. Client#submitHam(comment: Comment): Promise void","title":"Submit ham"},{"location":"features/submit_ham/#parameters","text":"","title":"Parameters"},{"location":"features/submit_ham/#comment-comment","text":"The user Comment to be submitted, incorrectly classified as spam. Tip Ideally, it should be the same object as the one passed to the original comment check API call.","title":"comment: Comment"},{"location":"features/submit_ham/#return-value","text":"A Promise that resolves when the given Comment has been submitted. The promise rejects with a ClientError exception when an error occurs. The exception message usually includes some debug information, provided by the X-akismet-debug-help HTTP header, about what exactly was invalid about the call.","title":"Return value"},{"location":"features/submit_ham/#example","text":"import { Author , Blog , Client , Comment } from @cedx/akismet ; async function main () : Promise void { try { const comment = new Comment ( new Author ( 127.0.0.1 , Mozilla/5.0 ), { content : A valid user comment (ham) } ); const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com ))); const isSpam = await client . checkComment ( comment ); // `true`, but `false` expected. console . log ( The comment was incorrectly classified as spam ); await client . submitHam ( comment ); } catch ( err ) { console . log ( `An error occurred: ${ err . message } ` ); } }","title":"Example"},{"location":"features/submit_spam/","text":"Submit spam This call is for submitting comments that weren't marked as spam but should have been. It is very important that the values you submit with this call match those of your comment check calls as closely as possible. In order to learn from its mistakes, Akismet needs to match your missed spam and false positive reports to the original comment check API calls made when the content was first posted. While it is normal for less information to be available for submit spam and submit ham calls (most comment systems and forums will not store all metadata), you should ensure that the values that you do send match those of the original content. Client#submitSpam(comment: Comment): Promise void Parameters comment : Comment The user Comment to be submitted, incorrectly classified as ham. Tip Ideally, it should be the same object as the one passed to the original comment check API call. Return value A Promise that resolves when the given Comment has been submitted. The promise rejects with a ClientError exception when an error occurs. The exception message usually includes some debug information, provided by the X-akismet-debug-help HTTP header, about what exactly was invalid about the call. Example import { Author , Blog , Client , Comment } from @cedx/akismet ; async function main () : Promise void { try { const comment = new Comment ( new Author ( 127.0.0.1 , Mozilla/5.0 ), { content : An invalid user comment (spam) } ); const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com ))); const isSpam = await client . checkComment ( comment ); // `false`, but `true` expected. console . log ( The comment was incorrectly classified as ham ); await client . submitSpam ( comment ); } catch ( err ) { console . log ( `An error occurred: ${ err . message } ` ); } }","title":"Submit spam"},{"location":"features/submit_spam/#submit-spam","text":"This call is for submitting comments that weren't marked as spam but should have been. It is very important that the values you submit with this call match those of your comment check calls as closely as possible. In order to learn from its mistakes, Akismet needs to match your missed spam and false positive reports to the original comment check API calls made when the content was first posted. While it is normal for less information to be available for submit spam and submit ham calls (most comment systems and forums will not store all metadata), you should ensure that the values that you do send match those of the original content. Client#submitSpam(comment: Comment): Promise void","title":"Submit spam"},{"location":"features/submit_spam/#parameters","text":"","title":"Parameters"},{"location":"features/submit_spam/#comment-comment","text":"The user Comment to be submitted, incorrectly classified as ham. Tip Ideally, it should be the same object as the one passed to the original comment check API call.","title":"comment: Comment"},{"location":"features/submit_spam/#return-value","text":"A Promise that resolves when the given Comment has been submitted. The promise rejects with a ClientError exception when an error occurs. The exception message usually includes some debug information, provided by the X-akismet-debug-help HTTP header, about what exactly was invalid about the call.","title":"Return value"},{"location":"features/submit_spam/#example","text":"import { Author , Blog , Client , Comment } from @cedx/akismet ; async function main () : Promise void { try { const comment = new Comment ( new Author ( 127.0.0.1 , Mozilla/5.0 ), { content : An invalid user comment (spam) } ); const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com ))); const isSpam = await client . checkComment ( comment ); // `false`, but `true` expected. console . log ( The comment was incorrectly classified as ham ); await client . submitSpam ( comment ); } catch ( err ) { console . log ( `An error occurred: ${ err . message } ` ); } }","title":"Example"},{"location":"usage/client_setup/","text":"","title":"Client setup"},{"location":"usage/lifecycle/","text":"Lifecycle","title":"Lifecycle"},{"location":"usage/lifecycle/#lifecycle","text":"","title":"Lifecycle"},{"location":"usage/structuring_api_calls/","text":"Structuring your API calls There are three different types of calls to Akismet: Key verification will verify whether or not a valid API key is being used. This is especially useful if you will have multiple users with their own Akismet subscriptions using your application. Comment check is used to ask Akismet whether or not a given post, comment, profile, etc. is spam. Submit spam and submit ham are follow-ups to let Akismet know when it got something wrong (missed spam and false positives). These are very important, and you shouldn't develop using the Akismet API without a facility to include reporting missed spam and false positives. Setting up the client Checking comments Setting your user agent If possible, your user agent string should always use the following format: Application Name/Version | Plugin Name/Version Info The default user agent string looks like: Node.js/10.0.0 | Akismet/14.0.0","title":"Structuring your API calls"},{"location":"usage/structuring_api_calls/#structuring-your-api-calls","text":"There are three different types of calls to Akismet: Key verification will verify whether or not a valid API key is being used. This is especially useful if you will have multiple users with their own Akismet subscriptions using your application. Comment check is used to ask Akismet whether or not a given post, comment, profile, etc. is spam. Submit spam and submit ham are follow-ups to let Akismet know when it got something wrong (missed spam and false positives). These are very important, and you shouldn't develop using the Akismet API without a facility to include reporting missed spam and false positives.","title":"Structuring your API calls"},{"location":"usage/structuring_api_calls/#setting-up-the-client","text":"","title":"Setting up the client"},{"location":"usage/structuring_api_calls/#checking-comments","text":"","title":"Checking comments"},{"location":"usage/structuring_api_calls/#setting-your-user-agent","text":"If possible, your user agent string should always use the following format: Application Name/Version | Plugin Name/Version Info The default user agent string looks like: Node.js/10.0.0 | Akismet/14.0.0","title":"Setting your user agent"},{"location":"usage/testing/","text":"Testing When you will integrate the library with your own application, you will of course need to test it. Often we see developers get ahead of themselves, making a few trivial API calls with minimal values and drawing the wrong conclusions about Akismet's accuracy. Simulate a positive (spam) result Make a comment check API call with the Author#name set to \"viagra-test-123\" or Author#email set to \"akismet-guaranteed-spam@example.com\" . Populate all other required fields with typical values. The Akismet API will always return a true response to a valid request with one of those values. If you receive anything else, something is wrong in your client, data, or communications. import { Author , Blog , Client , Comment } from @cedx/akismet ; async function main() { const author = new Author ( 127.0.0.1 , Mozilla/5.0 , { name : viagra-test-123 }); const comment = new Comment ( author , { content : A user comment }); const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com ))); const isSpam = await client . checkComment ( comment ); console . log ( `It should be true : ${ isSpam } ` ); } Simulate a negative (not spam) result Make a comment check API call with the Author#role set to \"administrator\" and all other required fields populated with typical values. The Akismet API will always return a false response. Any other response indicates a data or communication problem. import { Author , Blog , Client , Comment } from @cedx/akismet ; async function main() { const author = new Author ( 127.0.0.1 , Mozilla/5.0 , { role : administrator }); const comment = new Comment ( author , { content : A user comment }); const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com ))); const isSpam = await client . checkComment ( comment ); console . log ( `It should be false : ${ isSpam } ` ); } Automated testing Enable the Client#isTest option in your tests. That will tell Akismet not to change its behaviour based on those API calls \u2013 they will have no training effect. That means your tests will be somewhat repeatable, in the sense that one test won't influence subsequent calls. import { Author , Blog , Client , Comment } from @cedx/akismet ; async function main() { const author = new Author ( 127.0.0.1 , Mozilla/5.0 ); const comment = new Comment ( author , { content : A user comment }); const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com )), { isTest : true } ); console . log ( It should not influence subsequent calls ); await client . checkComment ( comment ); }","title":"Testing"},{"location":"usage/testing/#testing","text":"When you will integrate the library with your own application, you will of course need to test it. Often we see developers get ahead of themselves, making a few trivial API calls with minimal values and drawing the wrong conclusions about Akismet's accuracy.","title":"Testing"},{"location":"usage/testing/#simulate-a-positive-spam-result","text":"Make a comment check API call with the Author#name set to \"viagra-test-123\" or Author#email set to \"akismet-guaranteed-spam@example.com\" . Populate all other required fields with typical values. The Akismet API will always return a true response to a valid request with one of those values. If you receive anything else, something is wrong in your client, data, or communications. import { Author , Blog , Client , Comment } from @cedx/akismet ; async function main() { const author = new Author ( 127.0.0.1 , Mozilla/5.0 , { name : viagra-test-123 }); const comment = new Comment ( author , { content : A user comment }); const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com ))); const isSpam = await client . checkComment ( comment ); console . log ( `It should be true : ${ isSpam } ` ); }","title":"Simulate a positive (spam) result"},{"location":"usage/testing/#simulate-a-negative-not-spam-result","text":"Make a comment check API call with the Author#role set to \"administrator\" and all other required fields populated with typical values. The Akismet API will always return a false response. Any other response indicates a data or communication problem. import { Author , Blog , Client , Comment } from @cedx/akismet ; async function main() { const author = new Author ( 127.0.0.1 , Mozilla/5.0 , { role : administrator }); const comment = new Comment ( author , { content : A user comment }); const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com ))); const isSpam = await client . checkComment ( comment ); console . log ( `It should be false : ${ isSpam } ` ); }","title":"Simulate a negative (not spam) result"},{"location":"usage/testing/#automated-testing","text":"Enable the Client#isTest option in your tests. That will tell Akismet not to change its behaviour based on those API calls \u2013 they will have no training effect. That means your tests will be somewhat repeatable, in the sense that one test won't influence subsequent calls. import { Author , Blog , Client , Comment } from @cedx/akismet ; async function main() { const author = new Author ( 127.0.0.1 , Mozilla/5.0 ); const comment = new Comment ( author , { content : A user comment }); const client = new Client ( 123YourAPIKey , new Blog ( new URL ( https://www.yourblog.com )), { isTest : true } ); console . log ( It should not influence subsequent calls ); await client . checkComment ( comment ); }","title":"Automated testing"}]}